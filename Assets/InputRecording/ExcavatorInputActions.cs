//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/InputRecording/ExcavatorInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ExcavatorInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ExcavatorInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ExcavatorInputActions"",
    ""maps"": [
        {
            ""name"": ""Excavator"",
            ""id"": ""2015e2e3-95a7-4e88-9274-732c9b7795c8"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""2f2ea906-89b1-411a-bc7f-0a57e06c079c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d92ecb1a-e6c9-4cfe-ac6d-19b71e6939df"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e039c505-5134-4ffb-81dd-afc1a77f212d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Excavator
        m_Excavator = asset.FindActionMap("Excavator", throwIfNotFound: true);
        m_Excavator_Move = m_Excavator.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Excavator
    private readonly InputActionMap m_Excavator;
    private List<IExcavatorActions> m_ExcavatorActionsCallbackInterfaces = new List<IExcavatorActions>();
    private readonly InputAction m_Excavator_Move;
    public struct ExcavatorActions
    {
        private @ExcavatorInputActions m_Wrapper;
        public ExcavatorActions(@ExcavatorInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Excavator_Move;
        public InputActionMap Get() { return m_Wrapper.m_Excavator; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ExcavatorActions set) { return set.Get(); }
        public void AddCallbacks(IExcavatorActions instance)
        {
            if (instance == null || m_Wrapper.m_ExcavatorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ExcavatorActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IExcavatorActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IExcavatorActions instance)
        {
            if (m_Wrapper.m_ExcavatorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IExcavatorActions instance)
        {
            foreach (var item in m_Wrapper.m_ExcavatorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ExcavatorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ExcavatorActions @Excavator => new ExcavatorActions(this);
    public interface IExcavatorActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
