// refer: Oculus.Interaction.Grabbale
// Add hover event to show pipe color and size

using System;
using System.CodeDom;
using System.Collections.Generic;
using Fusion;
using UnityEngine;

using Oculus.Interaction;
using Oculus.Interaction.DistanceReticles;
using Oculus.Interaction.HandGrab;

namespace VRC2.Events
{
    [RequireComponent(typeof(DistanceGrabInteractable),
        typeof(AutoMoveTowardsTargetProvider), typeof(ReticleDataIcon))]
    public class GeneralGrabber : PointableElement, IGrabbable
    {
        [SerializeField, Interface(typeof(ITransformer))] [Optional(OptionalAttribute.Flag.AutoGenerated)]
        private UnityEngine.Object _oneGrabTransformer = null;

        [SerializeField, Interface(typeof(ITransformer)), Optional]
        private UnityEngine.Object _twoGrabTransformer = null;

        [Tooltip("The target transform of the Grabbable. If unassigned, " +
                 "the transform of this GameObject will be used.")]
        [SerializeField]
        [Optional(OptionalAttribute.Flag.AutoGenerated)]
        private Transform _targetTransform;

        [SerializeField] private int _maxGrabPoints = -1;

        #region Actions

        public System.Action OnSelect;
        public System.Action OnUnselect;
        public System.Action OnCancel;
        public System.Action OnHover;
        public System.Action OnUnhover;

        #endregion
        
        public int MaxGrabPoints
        {
            get { return _maxGrabPoints; }
            set { _maxGrabPoints = value; }
        }

        public Transform Transform => _targetTransform;
        public List<Pose> GrabPoints => _selectingPoints;

        private ITransformer _activeTransformer = null;
        private ITransformer OneGrabTransformer;
        private ITransformer TwoGrabTransformer;

        protected override void Awake()
        {
            base.Awake();
            OneGrabTransformer = _oneGrabTransformer as ITransformer;
            TwoGrabTransformer = _twoGrabTransformer as ITransformer;
        }

        protected override void Start()
        {
            this.BeginStart(ref _started, () => base.Start());

            if (_targetTransform == null)
            {
                _targetTransform = transform;
            }

            if (_oneGrabTransformer != null)
            {
                this.AssertField(OneGrabTransformer, nameof(OneGrabTransformer));
                OneGrabTransformer.Initialize(this);
            }

            if (_twoGrabTransformer != null)
            {
                this.AssertField(TwoGrabTransformer, nameof(TwoGrabTransformer));
                TwoGrabTransformer.Initialize(this);
            }

            // Create a default if no transformers assigned
            if (OneGrabTransformer == null &&
                TwoGrabTransformer == null)
            {
                OneGrabFreeTransformer defaultTransformer = gameObject.AddComponent<OneGrabFreeTransformer>();
                _oneGrabTransformer = defaultTransformer;
                OneGrabTransformer = defaultTransformer;
                OneGrabTransformer.Initialize(this);
            }

            this.EndStart(ref _started);
        }

        public override void ProcessPointerEvent(PointerEvent evt)
        {
            switch (evt.Type)
            {
                case PointerEventType.Select:
                    if (OnSelect != null) OnSelect();
                    break;
                case PointerEventType.Unselect:
                    if (OnUnselect != null) OnUnselect();
                    break;
                case PointerEventType.Cancel:
                    if (OnCancel != null) OnCancel();
                    break;
                case PointerEventType.Hover:
                    if (OnHover != null) OnHover();
                    break;

                case PointerEventType.Unhover:
                    if (OnUnhover != null) OnUnhover();
                    break;
            }
        }

        #region Inject

        public void InjectOptionalOneGrabTransformer(ITransformer transformer)
        {
            _oneGrabTransformer = transformer as UnityEngine.Object;
            OneGrabTransformer = transformer;
        }

        public void InjectOptionalTwoGrabTransformer(ITransformer transformer)
        {
            _twoGrabTransformer = transformer as UnityEngine.Object;
            TwoGrabTransformer = transformer;
        }

        public void InjectOptionalTargetTransform(Transform targetTransform)
        {
            _targetTransform = targetTransform;
        }

        #endregion
    }
}