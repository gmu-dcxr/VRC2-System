// refer: Oculus.Interaction.Grabbale
// Add hover event to show pipe color and size

using System.Collections.Generic;
using UnityEngine;

using Oculus.Interaction;

namespace VRC2.Events
{
    public class PipeGrabbable : PointableElement, IGrabbable
    {
        [SerializeField, Interface(typeof(ITransformer))] [Optional(OptionalAttribute.Flag.AutoGenerated)]
        private UnityEngine.Object _oneGrabTransformer = null;

        [SerializeField, Interface(typeof(ITransformer)), Optional]
        private UnityEngine.Object _twoGrabTransformer = null;

        [Tooltip("The target transform of the Grabbable. If unassigned, " +
                 "the transform of this GameObject will be used.")]
        [SerializeField]
        [Optional(OptionalAttribute.Flag.AutoGenerated)]
        private Transform _targetTransform;

        [SerializeField] private int _maxGrabPoints = -1;

        [Header("Label Controller")] [SerializeField]
        private PipeLabelController _pipeLabelController;

        [Header("Spawned")] [SerializeField] private bool isSpawnedPipe;

        public int MaxGrabPoints
        {
            get { return _maxGrabPoints; }
            set { _maxGrabPoints = value; }
        }

        public Transform Transform => _targetTransform;
        public List<Pose> GrabPoints => _selectingPoints;

        private ITransformer _activeTransformer = null;
        private ITransformer OneGrabTransformer;
        private ITransformer TwoGrabTransformer;

        protected override void Awake()
        {
            base.Awake();
            OneGrabTransformer = _oneGrabTransformer as ITransformer;
            TwoGrabTransformer = _twoGrabTransformer as ITransformer;
        }

        protected override void Start()
        {
            this.BeginStart(ref _started, () => base.Start());

            if (_targetTransform == null)
            {
                _targetTransform = transform;
            }

            if (_oneGrabTransformer != null)
            {
                this.AssertField(OneGrabTransformer, nameof(OneGrabTransformer));
                OneGrabTransformer.Initialize(this);
            }

            if (_twoGrabTransformer != null)
            {
                this.AssertField(TwoGrabTransformer, nameof(TwoGrabTransformer));
                TwoGrabTransformer.Initialize(this);
            }

            // Create a default if no transformers assigned
            if (OneGrabTransformer == null &&
                TwoGrabTransformer == null)
            {
                OneGrabFreeTransformer defaultTransformer = gameObject.AddComponent<OneGrabFreeTransformer>();
                _oneGrabTransformer = defaultTransformer;
                OneGrabTransformer = defaultTransformer;
                OneGrabTransformer.Initialize(this);
            }

            this.EndStart(ref _started);
            
            // at the beginning, it's not spawned object
            isSpawnedPipe = false;
        }

        #region Spawn Pipe for networking

        internal void PreparePipeSpawn()
        {
            // update Global color and size
            GlobalConstants.spawnTemplate = gameObject;
        }

        #endregion

        #region Different Logic for nonspawned/spawned pipes

        private void NonSpawnedPipeProcessPointerEvent(PointerEvent evt)
        {
            // non spawned can only support hover/unhover event
            // non spawned can only support hover event
            switch (evt.Type)
            {
                case PointerEventType.Select:
                    // never show label after selection
                    _pipeLabelController.neverShowAfterSelect = true;
                    _pipeLabelController.Show(false);
                    // get pipe color and size for spawning
                    PreparePipeSpawn();
                    
                    EndTransform();
                    break;
                case PointerEventType.Unselect:
                    EndTransform();
                    break;
                case PointerEventType.Cancel:
                    EndTransform();
                    break;
                // add hover event
                case PointerEventType.Hover:
                    // show label when hovering
                    _pipeLabelController.Show(true);
                    break;
                
                // add unhover event
                case PointerEventType.Unhover:
                    // hide label when unhovering
                    _pipeLabelController.Show(false);
                    break;
            }

            base.ProcessPointerEvent(evt);

            switch (evt.Type)
            {
                case PointerEventType.Select:
                    BeginTransform();
                    break;
                case PointerEventType.Unselect:
                    BeginTransform();
                    break;
                case PointerEventType.Move:
                    UpdateTransform();
                    break;
            }
        }

        private void SpawnedPipeProcessPointerEvent(PointerEvent evt)
        {
            // non spawned can only support hover event
            switch (evt.Type)
            {
                case PointerEventType.Select:
                    // never show label after selection
                    _pipeLabelController.neverShowAfterSelect = true;
                    _pipeLabelController.Show(false);
                    // get pipe color and size for spawning
                    PreparePipeSpawn();
                    
                    EndTransform();
                    break;
                case PointerEventType.Unselect:
                    EndTransform();
                    break;
                case PointerEventType.Cancel:
                    EndTransform();
                    break;
                // add hover event
                case PointerEventType.Hover:
                    // show label when hovering
                    _pipeLabelController.Show(true);
                    break;
                
                // add unhover event
                case PointerEventType.Unhover:
                    // hide label when unhovering
                    _pipeLabelController.Show(false);
                    break;
            }

            base.ProcessPointerEvent(evt);

            switch (evt.Type)
            {
                case PointerEventType.Select:
                    BeginTransform();
                    break;
                case PointerEventType.Unselect:
                    BeginTransform();
                    break;
                case PointerEventType.Move:
                    UpdateTransform();
                    break;
            }
        }

        #endregion



        public override void ProcessPointerEvent(PointerEvent evt)
        {
            if (isSpawnedPipe)
            {
                SpawnedPipeProcessPointerEvent(evt);
            }
            else
            {
                NonSpawnedPipeProcessPointerEvent(evt);
            }
        }

        // Whenever we change the number of grab points, we save the
        // current transform data
        private void BeginTransform()
        {
            // End the transform on any existing transformer before we
            // begin the new one
            EndTransform();

            int useGrabPoints = _selectingPoints.Count;
            if (_maxGrabPoints != -1)
            {
                useGrabPoints = Mathf.Min(useGrabPoints, _maxGrabPoints);
            }

            switch (useGrabPoints)
            {
                case 1:
                    _activeTransformer = OneGrabTransformer;
                    break;
                case 2:
                    _activeTransformer = TwoGrabTransformer;
                    break;
                default:
                    _activeTransformer = null;
                    break;
            }

            if (_activeTransformer == null)
            {
                return;
            }

            _activeTransformer.BeginTransform();
        }

        private void UpdateTransform()
        {
            if (_activeTransformer == null)
            {
                return;
            }

            _activeTransformer.UpdateTransform();
        }

        private void EndTransform()
        {
            if (_activeTransformer == null)
            {
                return;
            }

            _activeTransformer.EndTransform();
            _activeTransformer = null;
        }

        protected override void OnDisable()
        {
            if (_started)
            {
                EndTransform();
            }

            base.OnDisable();
        }

        #region Inject

        public void InjectOptionalOneGrabTransformer(ITransformer transformer)
        {
            _oneGrabTransformer = transformer as UnityEngine.Object;
            OneGrabTransformer = transformer;
        }

        public void InjectOptionalTwoGrabTransformer(ITransformer transformer)
        {
            _twoGrabTransformer = transformer as UnityEngine.Object;
            TwoGrabTransformer = transformer;
        }

        public void InjectOptionalTargetTransform(Transform targetTransform)
        {
            _targetTransform = targetTransform;
        }

        #endregion
    }
}