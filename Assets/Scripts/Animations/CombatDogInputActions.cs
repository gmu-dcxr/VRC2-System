//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Animations/CombatDog.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CombatDogInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CombatDogInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CombatDog"",
    ""maps"": [
        {
            ""name"": ""CombatDog"",
            ""id"": ""ac4b73fa-435b-4fdf-8002-cc29b748b364"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""8cbea3c5-e3ca-4d64-a22c-e9a0b17e1fdf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""abf4d3d1-cf0a-44b1-9c3d-6e8414b1dcf8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Hit"",
                    ""type"": ""Button"",
                    ""id"": ""de4d2314-a8dd-4aa3-93c4-1865d0d3b727"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9504aea5-2188-4b79-b96e-e28c800368e1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""9cb879cc-60ef-42cf-82ba-0f18eeaacf45"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""8c2d638f-6570-4bed-ae96-575832264410"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e0bcea15-5f77-4882-82b3-92c454306297"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""08ac32bb-9881-4c37-8d1f-ea52d8aeeedd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""cc9b2eba-41ed-4045-a4b3-b278d4bb55d4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""0c9c22b5-5ec2-4686-87fd-e3f481f14737"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""027934bc-c616-489d-9c21-d36f0b8af2e0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bbca5b95-b8ef-4f73-abcc-e5dbf5f6c95e"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Hit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CombatDog
        m_CombatDog = asset.FindActionMap("CombatDog", throwIfNotFound: true);
        m_CombatDog_Walk = m_CombatDog.FindAction("Walk", throwIfNotFound: true);
        m_CombatDog_Turn = m_CombatDog.FindAction("Turn", throwIfNotFound: true);
        m_CombatDog_Hit = m_CombatDog.FindAction("Hit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CombatDog
    private readonly InputActionMap m_CombatDog;
    private List<ICombatDogActions> m_CombatDogActionsCallbackInterfaces = new List<ICombatDogActions>();
    private readonly InputAction m_CombatDog_Walk;
    private readonly InputAction m_CombatDog_Turn;
    private readonly InputAction m_CombatDog_Hit;
    public struct CombatDogActions
    {
        private @CombatDogInputActions m_Wrapper;
        public CombatDogActions(@CombatDogInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_CombatDog_Walk;
        public InputAction @Turn => m_Wrapper.m_CombatDog_Turn;
        public InputAction @Hit => m_Wrapper.m_CombatDog_Hit;
        public InputActionMap Get() { return m_Wrapper.m_CombatDog; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatDogActions set) { return set.Get(); }
        public void AddCallbacks(ICombatDogActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatDogActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatDogActionsCallbackInterfaces.Add(instance);
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
            @Hit.started += instance.OnHit;
            @Hit.performed += instance.OnHit;
            @Hit.canceled += instance.OnHit;
        }

        private void UnregisterCallbacks(ICombatDogActions instance)
        {
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
            @Hit.started -= instance.OnHit;
            @Hit.performed -= instance.OnHit;
            @Hit.canceled -= instance.OnHit;
        }

        public void RemoveCallbacks(ICombatDogActions instance)
        {
            if (m_Wrapper.m_CombatDogActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombatDogActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatDogActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatDogActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatDogActions @CombatDog => new CombatDogActions(this);
    public interface ICombatDogActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
        void OnHit(InputAction.CallbackContext context);
    }
}
