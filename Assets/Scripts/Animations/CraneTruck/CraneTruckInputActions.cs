//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Animations/CraneTruck/CraneTruckInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CraneTruckInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CraneTruckInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CraneTruckInputActions"",
    ""maps"": [
        {
            ""name"": ""Truck"",
            ""id"": ""d21eb83f-0066-49b7-b949-874207b5ee76"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""fdbb3f6e-c946-4900-a81d-c958179bf8ab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Button"",
                    ""id"": ""265183c2-e9fc-4a1b-b0af-38cf53241042"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Switch"",
                    ""type"": ""Button"",
                    ""id"": ""17cc3756-2b15-41ac-b996-f741e0e2eac2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""8947dfe8-96d9-4592-b81a-11829a3ae2d9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e180233b-d81b-4e7a-b5ce-e9d41fc532f3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1dec3435-5927-4208-a195-dda9888cb6dd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7c99a1a9-b7b1-4ab7-8977-ccff8b077782"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""50dd959e-84f0-46fb-b40e-995ac1bde898"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9b38c123-e21c-482e-8a9b-e956351aa825"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f766554f-61df-42a3-ab9c-676a7b491a54"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Switch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Crane"",
            ""id"": ""0ae3dfca-90be-453a-ac99-a409c54f0499"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""6780a357-b583-4350-8096-4f3e5a852901"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Arrow"",
                    ""type"": ""Value"",
                    ""id"": ""9841c71a-be4a-4883-b99c-960c1f1aab28"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Seize"",
                    ""type"": ""Button"",
                    ""id"": ""c7a989a2-d7b2-4204-84b9-0f7f8aa22afb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3e36c8a4-da2c-4ebf-8f8f-9037d5488aa2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e56f9e8c-649a-49a9-a4ed-1953d13023d7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fc5cd6a5-cc30-48c4-a01a-098127a06802"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6c2b08d0-2c41-4a9d-9947-3c2e40b39bdf"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5bdfa6a4-03c1-4284-86be-ef9d1368fda5"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d1bbb728-c320-4292-ab6f-146def261037"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrow"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d70da172-b93b-49a7-bd8e-1a5fa8606255"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5c8fe6fd-56a5-4d7c-86c8-c2ad04c02bb5"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e48427b1-c491-4c2d-a88e-67141e852025"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a2c26140-225a-4670-9eda-8b34ce53e2c0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""110f51b7-4d11-4748-84e7-d8980d93612e"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Seize"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Truck
        m_Truck = asset.FindActionMap("Truck", throwIfNotFound: true);
        m_Truck_Move = m_Truck.FindAction("Move", throwIfNotFound: true);
        m_Truck_Brake = m_Truck.FindAction("Brake", throwIfNotFound: true);
        m_Truck_Switch = m_Truck.FindAction("Switch", throwIfNotFound: true);
        // Crane
        m_Crane = asset.FindActionMap("Crane", throwIfNotFound: true);
        m_Crane_Move = m_Crane.FindAction("Move", throwIfNotFound: true);
        m_Crane_Arrow = m_Crane.FindAction("Arrow", throwIfNotFound: true);
        m_Crane_Seize = m_Crane.FindAction("Seize", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Truck
    private readonly InputActionMap m_Truck;
    private List<ITruckActions> m_TruckActionsCallbackInterfaces = new List<ITruckActions>();
    private readonly InputAction m_Truck_Move;
    private readonly InputAction m_Truck_Brake;
    private readonly InputAction m_Truck_Switch;
    public struct TruckActions
    {
        private @CraneTruckInputActions m_Wrapper;
        public TruckActions(@CraneTruckInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Truck_Move;
        public InputAction @Brake => m_Wrapper.m_Truck_Brake;
        public InputAction @Switch => m_Wrapper.m_Truck_Switch;
        public InputActionMap Get() { return m_Wrapper.m_Truck; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TruckActions set) { return set.Get(); }
        public void AddCallbacks(ITruckActions instance)
        {
            if (instance == null || m_Wrapper.m_TruckActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TruckActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
            @Switch.started += instance.OnSwitch;
            @Switch.performed += instance.OnSwitch;
            @Switch.canceled += instance.OnSwitch;
        }

        private void UnregisterCallbacks(ITruckActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
            @Switch.started -= instance.OnSwitch;
            @Switch.performed -= instance.OnSwitch;
            @Switch.canceled -= instance.OnSwitch;
        }

        public void RemoveCallbacks(ITruckActions instance)
        {
            if (m_Wrapper.m_TruckActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITruckActions instance)
        {
            foreach (var item in m_Wrapper.m_TruckActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TruckActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TruckActions @Truck => new TruckActions(this);

    // Crane
    private readonly InputActionMap m_Crane;
    private List<ICraneActions> m_CraneActionsCallbackInterfaces = new List<ICraneActions>();
    private readonly InputAction m_Crane_Move;
    private readonly InputAction m_Crane_Arrow;
    private readonly InputAction m_Crane_Seize;
    public struct CraneActions
    {
        private @CraneTruckInputActions m_Wrapper;
        public CraneActions(@CraneTruckInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Crane_Move;
        public InputAction @Arrow => m_Wrapper.m_Crane_Arrow;
        public InputAction @Seize => m_Wrapper.m_Crane_Seize;
        public InputActionMap Get() { return m_Wrapper.m_Crane; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CraneActions set) { return set.Get(); }
        public void AddCallbacks(ICraneActions instance)
        {
            if (instance == null || m_Wrapper.m_CraneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CraneActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Arrow.started += instance.OnArrow;
            @Arrow.performed += instance.OnArrow;
            @Arrow.canceled += instance.OnArrow;
            @Seize.started += instance.OnSeize;
            @Seize.performed += instance.OnSeize;
            @Seize.canceled += instance.OnSeize;
        }

        private void UnregisterCallbacks(ICraneActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Arrow.started -= instance.OnArrow;
            @Arrow.performed -= instance.OnArrow;
            @Arrow.canceled -= instance.OnArrow;
            @Seize.started -= instance.OnSeize;
            @Seize.performed -= instance.OnSeize;
            @Seize.canceled -= instance.OnSeize;
        }

        public void RemoveCallbacks(ICraneActions instance)
        {
            if (m_Wrapper.m_CraneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICraneActions instance)
        {
            foreach (var item in m_Wrapper.m_CraneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CraneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CraneActions @Crane => new CraneActions(this);
    public interface ITruckActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnSwitch(InputAction.CallbackContext context);
    }
    public interface ICraneActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnArrow(InputAction.CallbackContext context);
        void OnSeize(InputAction.CallbackContext context);
    }
}
