//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Animations/TruckInpuActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TruckInpuActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TruckInpuActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TruckInpuActions"",
    ""maps"": [
        {
            ""name"": ""Truck"",
            ""id"": ""2794faea-a928-407d-8965-c233e08ad50e"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""beea3253-22ee-481c-9c43-dbab60b82461"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Brake"",
                    ""type"": ""Value"",
                    ""id"": ""356401cd-e731-470b-b959-15214380dbd1"",
                    ""expectedControlType"": ""Double"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""dc75285f-820e-479c-9842-47fba6e270a8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""008f22a8-573d-4f71-a3a3-448ff166c142"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c7e9228e-b1dc-4ab5-8c3c-61054d0987ba"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""0c8fceee-077e-42b3-91c4-ddc788803d04"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""54e3eaae-8a25-488a-84fb-0429bc91e5bf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e2e50a4e-fb91-4d06-a570-8e3c25f1b85c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Truck
        m_Truck = asset.FindActionMap("Truck", throwIfNotFound: true);
        m_Truck_Move = m_Truck.FindAction("Move", throwIfNotFound: true);
        m_Truck_Brake = m_Truck.FindAction("Brake", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Truck
    private readonly InputActionMap m_Truck;
    private List<ITruckActions> m_TruckActionsCallbackInterfaces = new List<ITruckActions>();
    private readonly InputAction m_Truck_Move;
    private readonly InputAction m_Truck_Brake;
    public struct TruckActions
    {
        private @TruckInpuActions m_Wrapper;
        public TruckActions(@TruckInpuActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Truck_Move;
        public InputAction @Brake => m_Wrapper.m_Truck_Brake;
        public InputActionMap Get() { return m_Wrapper.m_Truck; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TruckActions set) { return set.Get(); }
        public void AddCallbacks(ITruckActions instance)
        {
            if (instance == null || m_Wrapper.m_TruckActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TruckActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Brake.started += instance.OnBrake;
            @Brake.performed += instance.OnBrake;
            @Brake.canceled += instance.OnBrake;
        }

        private void UnregisterCallbacks(ITruckActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Brake.started -= instance.OnBrake;
            @Brake.performed -= instance.OnBrake;
            @Brake.canceled -= instance.OnBrake;
        }

        public void RemoveCallbacks(ITruckActions instance)
        {
            if (m_Wrapper.m_TruckActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITruckActions instance)
        {
            foreach (var item in m_Wrapper.m_TruckActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TruckActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TruckActions @Truck => new TruckActions(this);
    public interface ITruckActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
    }
}
