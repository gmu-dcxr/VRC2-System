//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Animations/RobotDog/RobotDogInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RobotDogInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RobotDogInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RobotDogInputActions"",
    ""maps"": [
        {
            ""name"": ""Body"",
            ""id"": ""652dcad8-398c-4d19-9ea1-a6bf06e80768"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""a6bfe5e4-68fd-4ac4-a0cc-6201c5a41675"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Turn"",
                    ""type"": ""Value"",
                    ""id"": ""6a43279b-43da-438b-9e86-e20c62f0559c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""eaa01479-772d-4ed0-8225-dcb9b5f3c6e5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3760465b-4af5-482d-8f6b-3ea55a89a05d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""da7ae4a3-8f1b-4a00-80cc-0ef21b1a6a3e"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2e2febbf-64f4-440d-b40b-e96261203f1c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""62c55d66-67fe-4b92-8cf8-b46bba4e29d7"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""42159464-3b62-42fe-900b-827cc8d8a8d0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8ce65dc6-c327-4e35-9f28-99c5c933dae0"",
                    ""path"": ""<Keyboard>/numpad4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f913f4df-36b4-419a-b565-1ce5d8e7e0c5"",
                    ""path"": ""<Keyboard>/numpad6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Arm"",
            ""id"": ""65574e43-257c-498a-bedb-dd74db494570"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""6c40be48-abad-4cef-89ed-cb4f755db9de"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""12525233-eb63-45e5-bd01-b25b5f764862"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Body
        m_Body = asset.FindActionMap("Body", throwIfNotFound: true);
        m_Body_Move = m_Body.FindAction("Move", throwIfNotFound: true);
        m_Body_Turn = m_Body.FindAction("Turn", throwIfNotFound: true);
        // Arm
        m_Arm = asset.FindActionMap("Arm", throwIfNotFound: true);
        m_Arm_Newaction = m_Arm.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Body
    private readonly InputActionMap m_Body;
    private List<IBodyActions> m_BodyActionsCallbackInterfaces = new List<IBodyActions>();
    private readonly InputAction m_Body_Move;
    private readonly InputAction m_Body_Turn;
    public struct BodyActions
    {
        private @RobotDogInputActions m_Wrapper;
        public BodyActions(@RobotDogInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Body_Move;
        public InputAction @Turn => m_Wrapper.m_Body_Turn;
        public InputActionMap Get() { return m_Wrapper.m_Body; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BodyActions set) { return set.Get(); }
        public void AddCallbacks(IBodyActions instance)
        {
            if (instance == null || m_Wrapper.m_BodyActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BodyActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Turn.started += instance.OnTurn;
            @Turn.performed += instance.OnTurn;
            @Turn.canceled += instance.OnTurn;
        }

        private void UnregisterCallbacks(IBodyActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Turn.started -= instance.OnTurn;
            @Turn.performed -= instance.OnTurn;
            @Turn.canceled -= instance.OnTurn;
        }

        public void RemoveCallbacks(IBodyActions instance)
        {
            if (m_Wrapper.m_BodyActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBodyActions instance)
        {
            foreach (var item in m_Wrapper.m_BodyActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BodyActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BodyActions @Body => new BodyActions(this);

    // Arm
    private readonly InputActionMap m_Arm;
    private List<IArmActions> m_ArmActionsCallbackInterfaces = new List<IArmActions>();
    private readonly InputAction m_Arm_Newaction;
    public struct ArmActions
    {
        private @RobotDogInputActions m_Wrapper;
        public ArmActions(@RobotDogInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Arm_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Arm; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ArmActions set) { return set.Get(); }
        public void AddCallbacks(IArmActions instance)
        {
            if (instance == null || m_Wrapper.m_ArmActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ArmActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IArmActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IArmActions instance)
        {
            if (m_Wrapper.m_ArmActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IArmActions instance)
        {
            foreach (var item in m_Wrapper.m_ArmActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ArmActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ArmActions @Arm => new ArmActions(this);
    public interface IBodyActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnTurn(InputAction.CallbackContext context);
    }
    public interface IArmActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
